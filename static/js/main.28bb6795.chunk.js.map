{"version":3,"sources":["modules/posts/store/all-posts/types.ts","modules/shared/components/Sidebar/Sidebar.tsx","modules/shared/components/Layout/Layout.tsx","modules/shared/enums/EntityType.ts","modules/shared/fixtures/posts.ts","modules/comments/store/all-comments/types.ts","modules/shared/fixtures/comments.ts","modules/shared/utils/get-stored-entity.ts","modules/shared/services/PostService.ts","modules/posts/components/AddPostForm/AddPostForm.tsx","modules/posts/components/Post/Post.tsx","modules/comments/store/all-comments/actions.ts","modules/posts/store/comments/types.ts","modules/shared/services/CommentService.ts","modules/posts/store/comments/actions.ts","modules/posts/store/comments/effects.ts","modules/comments/store/all-comments/effects.ts","modules/comments/components/AddCommentForm/AddCommentForm.tsx","modules/comments/components/Comment/Comment.tsx","modules/comments/containers/Comments/CommentsContainer.tsx","modules/posts/containers/Posts/PostsContainer.tsx","modules/posts/store/all-posts/effects.ts","modules/posts/store/all-posts/actions.ts","App.tsx","serviceWorker.ts","modules/comments/store/all-comments/index.ts","modules/comments/store/index.ts","modules/posts/store/all-posts/index.ts","modules/posts/store/comments/index.ts","modules/posts/store/index.ts","modules/store/rootReducer.ts","index.tsx","modules/store/index.ts"],"names":["PostsTypes","Sidebar","react_default","a","createElement","className","Layout","Sidebar_Sidebar","this","props","children","Component","EntityType","CommentsTypes","posts","id","description","comments","post_id","getStoredEntity","type","storedEntity","localStorage","getItem","entityRes","JSON","parse","PostService","Object","classCallCheck","createClass","key","value","post","res","concat","setItem","stringify","filter","item","AddPostForm","onSubmit","submitHandler","placeholder","onChange","changeHandler","Post","_Component","_this","possibleConstructorReturn","getPrototypeOf","call","state","isChecked","clickHandler","bind","assertThisInitialized","removeHandler","inherits","chooseHandler","data","e","stopPropagation","classes","classNames","post_checked","onClick","comments_count","defaultProps","PostCommentsTypes","CommentService","comment","getPostCommentsEffect","dispatch","getState","action","GET_POST_COMMENTS","getComments","GET_POST_COMMENTS_SUCCESS","message","GET_POST_COMMENTS_FAILURE","getPostCommentsFailure","getCommentsEffect","GET_COMMENTS","GET_COMMENTS_SUCCESS","GET_COMMENTS_FAILURE","getCommentsFailure","addCommentEffect","SAVE_COMMENTS","addComment","SAVE_COMMENTS_SUCCESS","SAVE_COMMENTS_FAILURE","saveCommentsFailure","AddCommentForm","onKeyUp","Comment","apply","arguments","CommentsContainer","commentText","changeCommentHandler","submitCommentFormHandler","clearCommentValue","clearPostComments","text","target","setState","preventDefault","keyCode","ctrlKey","uuid","postId","isEmpty","getCommentsList","AddCommentForm_AddCommentForm","items","map","Comment_Comment","mapDispatchToProps","CLEAR_POST_COMMENTS","connect","PostsContainer","isCommentsVisible","postText","checkedPostId","getPostsList","showComments","choosePostHandler","changePostHandler","submitPostFormHandler","removePostHandler","prevState","getPostsEffect","addPostEffect","deletePostEffect","_this$props","postComments","console","log","Fragment","components_AddPostForm_AddPostForm","Comments_CommentsContainer","_this2","Post_Post","length","GET_POSTS","getPosts","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","getPostsFailure","SAVE_POST","addPost","SAVE_POST_SUCCESS","SAVE_POST_FAILURE","savePostFailure","DELETE_POST","DELETE_POST_SUCCESS","deletePostSuccess","removePost","DELETE_POST_FAILURE","deletePostFailure","_ref","allPosts","entity","allComments","App","components_Layout_Layout","Posts_PostsContainer","Boolean","window","location","hostname","match","initialState","pending","reducer","combineReducers","undefined","merge","payload","toConsumableArray","CLEAR_COMMENTS","CLEAR_POSTS","createRootReducer","postsReducer","commentsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28bb6795.chunk.js","sourcesContent":["export enum PostsTypes {\n    GET_POSTS = '@@posts/GET_POSTS',\n    GET_POSTS_SUCCESS = '@@posts/GET_POSTS_SUCCESS',\n    GET_POSTS_FAILURE = '@@posts/GET_POSTS_FAILURE',\n\n    SAVE_POST = '@@posts/SAVE_POST',\n    SAVE_POST_SUCCESS = '@@posts/SAVE_POST_SUCCESS',\n    SAVE_POST_FAILURE = '@@posts/SAVE_POST_FAILURE',\n\n    DELETE_POST = '@@posts/DELETE_POST',\n    DELETE_POST_SUCCESS = '@@posts/DELETE_POST_SUCCESS',\n    DELETE_POST_FAILURE = '@@posts/DELETE_POST_SUCCESS',\n\n    CLEAR_POSTS = '@@posts/CLEAR_POSTS',\n}","import React from 'react';\n\nexport const Sidebar = () =>  (\n    <aside className=\"main-sidebar\">\n        <h1 className=\"main-title\">Diary app</h1>\n        <div className=\"main-subtitle\">Comment with no sense</div>\n    </aside>\n);","import React, {Component} from 'react';\nimport {Sidebar} from \"../Sidebar/Sidebar\";\n\nclass Layout extends Component {\n    render() {\n        return (\n            <div className=\"layout\">\n                <Sidebar/>\n                <main className=\"content-container\">\n                    <div className=\"main-content\">\n                        {this.props.children}\n                    </div>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default Layout;","export enum EntityType {\n    comments = 'comments',\n    posts = 'posts'\n}","import {IPost} from \"../models/IPost\";\n\nexport const posts: IPost[] = [\n    {\n        id: 1,\n        description: \"First item with custom name\",\n    },\n    {\n        id: 2,\n        description: \"Second item is active\",\n    }\n];","export enum CommentsTypes {\n    GET_COMMENTS = '@@comments/GET_COMMENTS',\n    GET_COMMENTS_SUCCESS = '@@comments/GET_COMMENTS_SUCCESS',\n    GET_COMMENTS_FAILURE = '@@comments/GET_COMMENTS_FAILURE',\n    CLEAR_COMMENTS = '@@comments/CLEAR_COMMENTS',\n\n    SAVE_COMMENTS = '@@comments/SAVE_COMMENTS',\n    SAVE_COMMENTS_SUCCESS = '@@comments/SAVE_COMMENTS_SUCCESS',\n    SAVE_COMMENTS_FAILURE = '@@comments/SAVE_COMMENTS_FAILURE',\n\n}","import {IComment} from \"../models/IComment\";\n\nexport const comments: IComment[] = [\n    {\n        id: 1,\n        description: \"Cum habena peregrinatione, omnes parses anhelare flavum, placidus brabeutaes.\",\n        post_id: 2,\n    },\n    {\n        id: 2,\n        description: \"Adgium persuaderes, tanquam raptus cacula. Demissios ire! Solitudo de pius valebat, experientia orexis!\",\n        post_id: 2\n    },\n    {\n        id: 3,\n        description: \"Cobaltums mori in pius hafnia!\",\n        post_id: 1\n    }\n];","import {EntityType} from \"../enums/EntityType\";\nimport {IPost} from \"../models/IPost\";\nimport {IComment} from \"../models/IComment\";\nimport {posts} from \"../fixtures/posts\";\nimport {comments} from \"../fixtures/comments\";\n\ntype Param = IComment | IPost;\n\nexport const getStoredEntity = (type: EntityType): Param[] => {\n    const storedEntity = localStorage.getItem(type);\n    let entityRes = [];\n\n    if (type === EntityType.posts) {\n        entityRes = posts;\n    }\n\n    if (type === EntityType.comments) {\n        entityRes = comments;\n    }\n\n    if (typeof storedEntity === 'string') {\n        entityRes = JSON.parse(storedEntity);\n    }\n\n    return entityRes;\n};","import {getStoredEntity} from \"../utils/get-stored-entity\";\nimport {IPost} from \"../models/IPost\";\nimport {EntityType} from \"../enums/EntityType\";\nimport {IComment} from \"../models/IComment\";\n\nexport class PostService {\n    static getPosts(): IPost[] {\n        return getStoredEntity(EntityType.posts) as IPost[];\n    }\n\n    static addPost(post: IPost) {\n        const posts = getStoredEntity(EntityType.posts) as IPost[];\n        const res = posts.concat(post);\n        localStorage.setItem(EntityType.posts, JSON.stringify(res));\n        return post;\n    }\n\n    static removePost(id: number) {\n        const posts = getStoredEntity(EntityType.posts) as IPost[];\n        const res = posts.filter((item: IPost) => item.id !== id);\n        localStorage.setItem(EntityType.posts, JSON.stringify(res));\n        return id;\n    }\n\n    static getComments(post_id: number): IComment[] {\n        const comments = getStoredEntity(EntityType.comments) as IComment[];\n        return comments.filter((item: IComment) => item.post_id === post_id);\n    }\n}","import React, {ChangeEvent, FormEvent} from 'react';\n\ninterface IProps {\n    submitHandler: (e: FormEvent<HTMLFormElement>) => void,\n    changeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n    value: string\n}\n\nconst AddPostForm = (props: IProps) => (\n    <form className=\"main-form main-form_post\" onSubmit={props.submitHandler}>\n        <input className=\"primary-input\" type=\"text\" placeholder=\"Type name here...\" onChange={props.changeHandler} value={props.value}/>\n        <button className=\"btn-ordinary\">\n            <span className=\"btn-ordinary__text\">Add new</span>\n        </button>\n    </form>\n);\n\nexport default AddPostForm;","import React, {Component} from 'react';\nimport {IPost} from \"../../../shared/models/IPost\";\nimport classNames from 'classnames';\n\ninterface IProps {\n    data: IPost,\n    chooseHandler: Function,\n    removeHandler: Function,\n    comments_count: number,\n    isChecked: boolean\n}\n\nexport class Post extends Component<IProps> {\n    static defaultProps = {\n        isChecked: false\n    };\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isChecked: false\n        };\n\n        this.clickHandler = this.clickHandler.bind(this);\n        this.removeHandler = this.removeHandler.bind(this);\n    }\n\n    clickHandler() {\n        this.props.chooseHandler(this.props.data.id);\n    }\n\n    removeHandler(e: React.MouseEvent) {\n        e.stopPropagation();\n        this.props.removeHandler(this.props.data.id);\n    }\n\n    render() {\n        const {data} = this.props;\n\n        const classes = classNames({\n            'post': true,\n            'post_checked': this.props.isChecked,\n        });\n\n        return (\n            <div className={classes} onClick={this.clickHandler}>\n                <div className=\"post__inner\">\n                    <div className=\"post__title-box\">\n                        <h3 className=\"post__title title\">{data.description}</h3>\n                        <span className=\"post__comment-count\">{this.props.comments_count}</span>\n                    </div>\n                    <button className=\"post__remove-btn btn-ordinary btn-ordinary_remove\" onClick={this.removeHandler}>Delete</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import {CommentsTypes} from './types';\nimport {action} from 'typesafe-actions';\nimport {IComment} from \"../../../shared/models/IComment\";\n\nexport const getComments = () => action(CommentsTypes.GET_COMMENTS);\nexport const getCommentsSuccess = (data: IComment[]) => action(CommentsTypes.GET_COMMENTS_SUCCESS, {data});\nexport const getCommentsFailure = (message: string) => action(CommentsTypes.GET_COMMENTS_FAILURE, {message});\nexport const clearComments = () => action(CommentsTypes.CLEAR_COMMENTS);\n\nexport const saveComments = () => action(CommentsTypes.SAVE_COMMENTS);\nexport const saveCommentsSuccess = (data: IComment) => action(CommentsTypes.SAVE_COMMENTS_SUCCESS, {data});\nexport const saveCommentsFailure = (message: string) => action(CommentsTypes.SAVE_COMMENTS_FAILURE, {message});\n\n","export enum PostCommentsTypes {\n    GET_POST_COMMENTS = '@@posts/GET_POST_COMMENTS',\n    GET_POST_COMMENTS_SUCCESS = '@@posts/GET_POST_COMMENTS_SUCCESS',\n    GET_POST_COMMENTS_FAILURE = '@@posts/GET_POST_COMMENTS_FAILURE',\n\n    CLEAR_POST_COMMENTS = '@@posts/CLEAR_POST_COMMENTS',\n}","import {IComment} from \"../models/IComment\";\nimport {getStoredEntity} from \"../utils/get-stored-entity\";\nimport {EntityType} from \"../enums/EntityType\";\n\nexport class CommentService {\n    static getComments(): IComment[] {\n        return getStoredEntity(EntityType.comments) as IComment[];\n    }\n\n    static addComment(comment: IComment) {\n        const comments = getStoredEntity(EntityType.comments) as IComment[];\n        const res = comments.concat(comment);\n        localStorage.setItem(EntityType.comments, JSON.stringify(res));\n        return comment;\n    }\n\n    static removeComment(id: number) {\n        const comments = getStoredEntity(EntityType.comments) as IComment[];\n        const res = comments.filter((item: IComment) => item.id !== id);\n        localStorage.setItem('comments', JSON.stringify(res));\n        return id;\n    }\n}","import {action} from \"typesafe-actions\";\nimport {PostCommentsTypes} from \"./types\";\nimport {IComment} from \"../../../shared/models/IComment\";\n\nexport const getPostComments = () => action(PostCommentsTypes.GET_POST_COMMENTS);\nexport const getPostCommentsSuccess = (data: IComment[]) => action(PostCommentsTypes.GET_POST_COMMENTS_SUCCESS, {data});\nexport const getPostCommentsFailure = (message: string) => action(PostCommentsTypes.GET_POST_COMMENTS_FAILURE, { message });\n\nexport const clearPostComments = () => action(PostCommentsTypes.CLEAR_POST_COMMENTS);\n","import {ThunkDispatch} from \"redux-thunk\";\nimport {IApplicationState} from \"../../../store/rootReducer\";\nimport {Action} from \"redux\";\nimport {getPostComments, getPostCommentsFailure, getPostCommentsSuccess } from \"./actions\";\nimport {PostService} from \"../../../shared/services/PostService\";\n\nexport const getPostCommentsEffect = (post_id: number) => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(getPostComments());\n\n    try {\n        const res = PostService.getComments(post_id);\n        dispatch(getPostCommentsSuccess(res));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(getPostCommentsFailure(message));\n    }\n};","import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getComments, getCommentsFailure, getCommentsSuccess, saveComments, saveCommentsSuccess, saveCommentsFailure } from './actions';\nimport {IApplicationState} from \"../../../store/rootReducer\";\nimport {CommentService} from \"../../../shared/services/CommentService\";\nimport {IComment} from \"../../../shared/models/IComment\";\nimport {getPostCommentsEffect} from \"../../../posts/store/comments/effects\";\n\nexport const getCommentsEffect = () => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(getComments());\n\n    try {\n        const res = CommentService.getComments();\n        dispatch(getCommentsSuccess(res));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(getCommentsFailure(message));\n    }\n};\n\nexport const addCommentEffect = (comment: IComment) => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(saveComments());\n\n    try {\n        const res = CommentService.addComment(comment);\n        dispatch(saveCommentsSuccess(res));\n        dispatch(getCommentsEffect());\n        dispatch(getPostCommentsEffect(comment.post_id));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(saveCommentsFailure(message));\n    }\n};","import React, {ChangeEvent, KeyboardEvent} from 'react';\n\ninterface IProps {\n    submitHandler: (e: KeyboardEvent<HTMLTextAreaElement>) => void,\n    changeHandler: (e: ChangeEvent<HTMLTextAreaElement>) => void\n    value: string\n}\n\nexport const AddCommentForm = (props: IProps) => (\n    <form className=\"textarea-box\">\n        <div className=\"square textarea-box__colored-square\"></div>\n        <textarea\n            className=\"textarea-box__textarea primary-textarea\"\n            value={props.value}\n            onKeyUp={props.submitHandler}\n            onChange={props.changeHandler}/>\n    </form>\n);","import React, {Component} from 'react';\nimport {IComment} from \"../../../shared/models/IComment\";\n\ninterface IProps {\n    data: IComment\n}\n\nexport class Comment extends Component<IProps> {\n    render() {\n        const {data} = this.props;\n        return (\n            <div className=\"comment\">\n                <div className=\"square comment__colored-square\"></div>\n                <div className=\"comment__description\">{data.description}</div>\n            </div>\n        );\n    }\n}","import React, {ChangeEvent, Component, KeyboardEvent} from 'react';\nimport {isEmpty} from \"ramda\";\nimport {IComment} from \"../../../shared/models/IComment\";\nimport {AddCommentForm} from \"../../components/AddCommentForm/AddCommentForm\";\nimport {Comment} from \"../../components/Comment/Comment\";\nimport uuid from \"uuid\";\nimport {addCommentEffect} from \"../../store/all-comments/effects\";\nimport {connect} from \"react-redux\";\nimport {clearPostComments} from \"../../../posts/store/comments/actions\";\n\ninterface PropsFromDispatch {\n    addCommentEffect: Function,\n    clearPostComments: Function\n}\n\ninterface IProps extends PropsFromDispatch {\n    data: IComment[],\n    postId: number\n}\n\ninterface IState {\n    commentText: string,\n}\n\nexport class CommentsContainer extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            commentText: '',\n        };\n\n        this.changeCommentHandler = this.changeCommentHandler.bind(this);\n        this.submitCommentFormHandler = this.submitCommentFormHandler.bind(this);\n        this.clearCommentValue = this.clearCommentValue.bind(this);\n    }\n\n    componentWillUnmount(): void {\n        this.props.clearPostComments()\n    }\n\n    changeCommentHandler(e: ChangeEvent<HTMLTextAreaElement>) {\n        const text = e.target.value;\n        this.setState(() => ({commentText: text}));\n    }\n\n    clearCommentValue() {\n        this.setState(() => ({commentText: ''}));\n    }\n\n    submitCommentFormHandler(e: KeyboardEvent<HTMLTextAreaElement>) {\n        e.preventDefault();\n\n        if (e.keyCode === 13 && e.ctrlKey) {\n            this.props.addCommentEffect({\n                id: uuid(),\n                description: this.state.commentText,\n                post_id: this.props.postId\n            });\n\n            this.clearCommentValue();\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"comments\">\n                <h2 className=\"comments__title title title_1\">Comments #{this.props.postId}</h2>\n                {!isEmpty(this.props.data) && this.props.data && this.getCommentsList(this.props.data)}\n                <AddCommentForm changeHandler={this.changeCommentHandler}\n                                value={this.state.commentText}\n                                submitHandler={this.submitCommentFormHandler}/>\n            </div>\n        );\n    }\n\n    private getCommentsList(items: IComment[]) {\n        return (\n            <div className=\"comments__content\">\n                {items.map((item: IComment) => (\n                    <Comment key={item.id} data={item}/>\n                ))}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps: PropsFromDispatch = {\n    addCommentEffect,\n    clearPostComments\n};\n\nexport default connect(null, mapDispatchToProps)(CommentsContainer);","import React, {ChangeEvent, Component, FormEvent} from 'react';\nimport {IPost} from \"../../../shared/models/IPost\";\nimport {IComment} from \"../../../shared/models/IComment\";\nimport {isEmpty} from 'ramda';\nimport {connect} from \"react-redux\";\nimport {IApplicationState} from \"../../../store/rootReducer\";\nimport {addPostEffect, deletePostEffect, getPostsEffect} from \"../../store/all-posts/effects\";\nimport uuid from 'uuid';\nimport AddPostForm from \"../../components/AddPostForm/AddPostForm\";\nimport {Post} from \"../../components/Post/Post\";\nimport {addCommentEffect, getCommentsEffect} from \"../../../comments/store/all-comments/effects\";\nimport {getPostCommentsEffect} from \"../../store/comments/effects\";\nimport Comments from \"../../../comments/containers/Comments/CommentsContainer\";\n\ninterface PropsFromDispatch {\n    getPostsEffect: Function,\n    getCommentsEffect: Function,\n    addPostEffect: Function,\n    getPostCommentsEffect: Function,\n    addCommentEffect: Function,\n    deletePostEffect: Function\n}\n\ninterface PropsFromState {\n    posts: IPost[],\n    comments: IComment[],\n    postComments: IComment[]\n}\n\ninterface IProps extends PropsFromDispatch, PropsFromState {\n}\n\ninterface IState {\n    isCommentsVisible: boolean,\n    postText: string,\n    checkedPostId: number\n}\n\nclass PostsContainer extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isCommentsVisible: false,\n            postText: '',\n            checkedPostId: 0\n        };\n\n        this.getPostsList = this.getPostsList.bind(this);\n        this.showComments = this.showComments.bind(this);\n        this.choosePostHandler = this.choosePostHandler.bind(this);\n        this.changePostHandler = this.changePostHandler.bind(this);\n        this.submitPostFormHandler = this.submitPostFormHandler.bind(this);\n        this.removePostHandler = this.removePostHandler.bind(this);\n    }\n\n    showComments() {\n        this.setState(prevState => ({\n            isCommentsVisible: !prevState.isCommentsVisible\n        }));\n    }\n\n    componentDidMount(): void {\n        this.props.getPostsEffect();\n        this.props.getCommentsEffect();\n    }\n\n    componentWillUnmount(): void {\n        this.setState(() => ({isCommentsVisible: false}));\n    }\n\n    choosePostHandler(post_id: number) {\n        this.props.getPostCommentsEffect(post_id);\n        this.setState(() => ({isCommentsVisible: true, checkedPostId: post_id}))\n    }\n\n    changePostHandler(e: ChangeEvent<HTMLInputElement>) {\n        const text = e.target.value;\n        this.setState(() => ({postText: text}));\n    }\n\n    submitPostFormHandler(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n\n        this.props.addPostEffect({\n            id: uuid(),\n            description: this.state.postText\n        });\n\n        this.setState(() => ({\n            postText: ''\n        }));\n    }\n\n    removePostHandler(post_id: number) {\n        this.props.deletePostEffect(post_id);\n        this.setState(() => ({isCommentsVisible: false}))\n    }\n\n    render() {\n        const {posts, postComments} = this.props;\n\n        console.log(postComments);\n        return (\n            <>\n                <div className=\"posts\">\n                    <h2 className=\"title title_1\">Items</h2>\n                    <AddPostForm value={this.state.postText} submitHandler={this.submitPostFormHandler} changeHandler={this.changePostHandler}/>\n                    {posts && !isEmpty(posts) && this.getPostsList(posts)}\n                </div>\n                {this.state.isCommentsVisible && <Comments data={postComments} postId={this.state.checkedPostId}/>}\n            </>\n        );\n    }\n\n    private getPostsList(items: IPost[]) {\n        return (\n            items.map((item: IPost) => {\n                const comments = this.props.comments.filter((comment: IComment) => comment.post_id === item.id);\n                return (<Post key={item.id} data={item} chooseHandler={this.choosePostHandler}\n                              isChecked={item.id === this.state.checkedPostId}\n                              comments_count={comments.length} removeHandler={this.removePostHandler}/>)\n            })\n        )\n    }\n}\n\nconst mapStateToProps = ({posts, comments}: IApplicationState) => ({\n    posts: posts.allPosts.entity,\n    comments: comments.allComments.entity,\n    postComments: posts.postComments.entity\n});\n\nconst mapDispatchToProps: PropsFromDispatch = {\n    getPostsEffect,\n    getCommentsEffect,\n    getPostCommentsEffect,\n    addPostEffect,\n    addCommentEffect,\n    deletePostEffect\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsContainer);","import { Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport {\n    deletePost, deletePostFailure, deletePostSuccess,\n    getPosts,\n    getPostsFailure,\n    getPostsSuccess, savePost, savePostSuccess,\n    savePostFailure\n} from './actions';\nimport {IApplicationState} from \"../../../store/rootReducer\";\nimport {PostService} from \"../../../shared/services/PostService\";\nimport {IPost} from \"../../../shared/models/IPost\";\n\nexport const getPostsEffect = () => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(getPosts());\n\n    try {\n        const res = PostService.getPosts();\n        dispatch(getPostsSuccess(res));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(getPostsFailure(message));\n    }\n};\n\nexport const addPostEffect = (post: IPost) => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(savePost());\n\n    try {\n        const res = PostService.addPost(post);\n        dispatch(savePostSuccess(res));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(savePostFailure(message));\n    }\n};\n\nexport const deletePostEffect = (id: number) => (dispatch: ThunkDispatch<IApplicationState, void, Action>, getState: Function) => {\n    dispatch(deletePost());\n\n    try {\n        const res = PostService.removePost(id);\n        dispatch(deletePostSuccess(res));\n    } catch (e) {\n        const message = 'Error found. Please, try again.';\n        dispatch(deletePostFailure(message));\n    }\n};","import {PostsTypes} from './types';\nimport {action} from 'typesafe-actions';\nimport {IPost} from \"../../../shared/models/IPost\";\n\nexport const getPosts = () => action(PostsTypes.GET_POSTS);\nexport const getPostsSuccess = (data: IPost[]) => action(PostsTypes.GET_POSTS_SUCCESS, {data});\nexport const getPostsFailure = (message: string) => action(PostsTypes.GET_POSTS_FAILURE, {message});\n\nexport const savePost = () => action(PostsTypes.SAVE_POST);\nexport const savePostSuccess = (data: IPost) => action(PostsTypes.SAVE_POST_SUCCESS, {data});\nexport const savePostFailure = (message: string) => action(PostsTypes.SAVE_POST_FAILURE, {message});\n\nexport const deletePost = () => action(PostsTypes.DELETE_POST);\nexport const deletePostSuccess = (id: number) => action(PostsTypes.DELETE_POST_SUCCESS, {id});\nexport const deletePostFailure = (message: string) => action(PostsTypes.DELETE_POST_FAILURE, {message});\n\nexport const clearPosts = () => action(PostsTypes.CLEAR_POSTS);\n","import React from 'react';\nimport './App.css';\nimport Layout from \"./modules/shared/components/Layout/Layout\";\nimport PostsContainer from \"./modules/posts/containers/Posts/PostsContainer\";\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <PostsContainer />\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {AnyAction, Reducer} from 'redux';\nimport {CommentsTypes} from './types';\nimport {merge} from 'ramda';\nimport {IComment} from \"../../../shared/models/IComment\";\n\nexport interface ICommentsState {\n    entity: IComment[],\n    pending: boolean,\n    message: string,\n}\n\nconst initialState: ICommentsState = {\n    pending: false,\n    entity: [],\n    message: ''\n};\n\nexport const reducer: Reducer<ICommentsState> = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case CommentsTypes.GET_COMMENTS:\n            return merge(state, {\n                pending: true\n            });\n        case CommentsTypes.GET_COMMENTS_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: action.payload.data\n            });\n        case CommentsTypes.GET_COMMENTS_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case CommentsTypes.SAVE_COMMENTS:\n            return merge(state, {\n                pending: true,\n            });\n        case CommentsTypes.SAVE_COMMENTS_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: [...state.entity, action.payload.data]\n            });\n        case CommentsTypes.SAVE_COMMENTS_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case CommentsTypes.CLEAR_COMMENTS:\n            return merge(state, {\n                pending: false,\n                entity: []\n            });\n        default:\n            return state;\n    }\n};","import {combineReducers} from 'redux';\nimport {ICommentsState, reducer as commentsReducer} from \"./all-comments\";\n\nexport interface CommentsState {\n    allComments: ICommentsState,\n}\n\nexport const reducer = combineReducers<CommentsState>({\n    allComments: commentsReducer,\n});\n","import { AnyAction, Reducer } from 'redux';\nimport { PostsTypes } from './types';\nimport {merge} from 'ramda';\nimport {IPost} from \"../../../shared/models/IPost\";\n\nexport interface IPostsState {\n    entity: IPost[],\n    pending: boolean,\n    message: string,\n}\n\nconst initialState: IPostsState = {\n    pending: false,\n    entity: [],\n    message: ''\n};\n\nexport const reducer: Reducer<IPostsState> = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case PostsTypes.GET_POSTS:\n            return merge(state, {\n                pending: true\n            });\n        case PostsTypes.GET_POSTS_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: action.payload.data\n            });\n        case PostsTypes.GET_POSTS_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case PostsTypes.SAVE_POST:\n            return merge(state, {\n                pending: true\n            });\n        case PostsTypes.SAVE_POST_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: [...state.entity, action.payload.data]\n            });\n        case PostsTypes.SAVE_POST_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case PostsTypes.DELETE_POST:\n            return merge(state, {\n                pending: true\n            });\n        case PostsTypes.DELETE_POST_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: state.entity.filter((item: IPost) => item.id !== action.payload.id),\n            });\n        case PostsTypes.DELETE_POST_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case PostsTypes.CLEAR_POSTS:\n            return merge(state, {\n                pending: false,\n                entity: []\n            });\n        default:\n            return state;\n    }\n};","import { AnyAction, Reducer } from 'redux';\nimport { PostCommentsTypes } from './types';\nimport {merge} from 'ramda';\nimport {IComment} from \"../../../shared/models/IComment\";\n\nexport interface IPostCommentsState {\n    entity: IComment[],\n    pending: boolean,\n    message: string,\n}\n\nconst initialState: IPostCommentsState = {\n    pending: false,\n    entity: [],\n    message: ''\n};\n\nexport const reducer: Reducer<IPostCommentsState> = (state = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case PostCommentsTypes.GET_POST_COMMENTS:\n            return merge(state, {\n                pending: true\n            });\n        case PostCommentsTypes.GET_POST_COMMENTS_SUCCESS:\n            return merge(state, {\n                pending: false,\n                entity: action.payload.data\n            });\n        case PostCommentsTypes.GET_POST_COMMENTS_FAILURE:\n            return merge(state, {\n                pending: false,\n                message: action.payload.message\n            });\n        case PostCommentsTypes.CLEAR_POST_COMMENTS:\n            return merge(state, {\n                pending: false,\n                entity: []\n            });\n        default:\n            return state;\n    }\n};","import {combineReducers} from 'redux';\nimport {IPostsState, reducer as postsReducer} from \"./all-posts\";\nimport {IPostCommentsState, reducer as postCommentsReducer} from \"./comments\";\n\nexport interface PostsState {\n    allPosts: IPostsState,\n    postComments: IPostCommentsState\n}\n\nexport const reducer = combineReducers<PostsState>({\n    allPosts: postsReducer,\n    postComments: postCommentsReducer\n});\n","import { combineReducers } from 'redux';\nimport {CommentsState, reducer as commentsReducer} from \"../comments/store\";\nimport {PostsState, reducer as postsReducer} from \"../posts/store\";\n\nexport interface IApplicationState {\n    posts: PostsState,\n    comments: CommentsState\n}\n\nexport const createRootReducer = () => combineReducers<IApplicationState>({\n    posts: postsReducer,\n    comments: commentsReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {configureStore} from \"./modules/store\";\nimport {Provider} from \"react-redux\";\nimport 'normalize.css/normalize.css';\nimport './index.scss';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore, Store} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport thunkMiddleware from 'redux-thunk';\nimport {createRootReducer, IApplicationState} from \"./rootReducer\";\n\nexport function configureStore(): Store<IApplicationState> {\n    return createStore(\n        createRootReducer(),\n        {},\n        composeWithDevTools(applyMiddleware(thunkMiddleware)),\n    );\n}"],"sourceRoot":""}